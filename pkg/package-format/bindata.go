// Package package_format Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// pkg/package-format/appimage/templates/AppRun.sh
package package_format

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _appimageTemplatesApprunSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x59\x6f\x73\xdb\x36\x93\x7f\xcf\x4f\xb1\xa1\xf8\xa4\x76\x27\x14\x2d\xf7\xc9\xd3\xd4\x19\x5d\xab\x54\x8c\xc3\x89\xff\x8d\xa5\xb4\xee\xc5\x39\x0d\x45\xae\x44\x8c\x28\x80\x25\x40\x5b\x8a\xa2\xef\x7e\xb3\x00\x29\x93\x92\xdc\x24\x77\x7e\x63\x99\xe0\x62\xff\x63\xf7\xb7\x60\xeb\x99\x37\x66\xdc\x1b\x87\x32\xb1\x24\x2a\x70\xd1\xb2\xd8\x04\x3e\xc2\x33\x70\x3f\x83\xed\xf4\xfd\x37\x1f\x4e\x6d\xf8\x04\xaf\x41\x25\xc8\x2d\x00\xe4\x77\x16\x80\xa6\x5d\x58\x13\x66\x59\xc3\x77\xc1\xa0\x6b\x3b\x47\xb6\xd5\x82\x44\xa9\xec\xc4\xf3\xa4\x0a\xa3\x99\xb8\xc3\x7c\x92\x8a\xfb\x76\x24\xe6\xde\xdf\x05\x4a\xc5\x04\x97\xde\x4f\x9d\x5f\x8e\x5e\x75\x5e\x79\x56\x98\x4f\x65\xf7\xc0\x76\x7e\xb3\x0f\xad\x8b\x0f\xe7\x6f\xfc\xeb\xd1\xe5\xdb\x51\xef\xfa\x94\xb8\xb5\x6c\xcb\x6a\x41\x96\x62\x28\x11\x62\x01\x5c\x28\x88\x92\x90\x4f\x11\x9c\x3f\xfc\x8b\xfe\xe5\xf5\xd5\xb5\xff\x36\xb8\x81\x50\x02\x53\x70\xcf\xd2\x14\xc2\x34\x15\xf7\x30\x11\x39\xc4\x28\x67\x4a\x64\x30\x61\x29\x4a\xab\x05\x63\x4c\x05\x9f\x32\x3e\x05\x25\xa0\x97\x65\xc1\x3c\x9c\xa2\xa4\x87\x31\x42\x8e\x91\x98\x72\xf6\x19\x63\x18\x2f\x61\x52\xa8\x22\xc7\x0d\xd1\x7b\xa6\x20\x12\xf3\x4c\x70\xe4\x8a\x58\xc9\x22\x4a\x48\x68\x25\x82\x71\x85\xd3\x3c\x24\xdb\x20\x0e\x71\x2e\xb8\xb4\xea\x0a\x76\xc3\x2c\x63\xc4\x69\xc6\x54\xe9\x5a\xed\xd8\xde\xd5\x55\x3f\xb8\x6e\x78\xb6\x05\x6f\x19\x8f\xe9\x89\xc4\xf7\x59\xde\x86\x40\x01\x93\x7a\x25\x66\x39\x46\x4a\xe4\x4b\x50\x49\x48\x3a\x71\x15\x32\x2e\x89\xf2\xba\xe0\x6d\xbd\x7d\x98\x30\x09\xa1\x94\xc5\x9c\x8c\x23\x32\x45\x2b\x32\xca\x59\xa6\x20\x47\xc9\x62\x94\xc0\x38\xfd\xd6\xc4\x80\xc8\x21\x04\x59\x8c\x37\x32\x0c\xbb\x60\xd2\xd8\xcf\x24\xe4\x05\xaf\xb6\x87\x7c\xe3\xa3\x17\xda\x80\x8a\xa1\x5e\x22\x4a\xc5\xe6\x08\x29\x9b\x61\xba\x84\x24\x94\x10\xa6\x39\x86\xf1\x52\xa7\x4e\x69\xbe\x05\x90\x85\x2a\xe9\xda\xce\x41\xcc\x72\x1e\xce\x11\x6c\xe7\x80\xc8\x52\xc6\x67\xe0\x4e\xc0\x76\x56\x94\x5f\x6b\xfb\xd0\x3e\xb4\x2d\x80\xfb\x84\xa5\x08\x1f\x3f\x82\xed\xd0\x4e\x1b\x9e\x75\xc1\xb6\xe1\xf9\x73\x4a\x58\x2c\x57\x3d\xa7\x63\xc3\xa7\x4f\xaf\x21\x16\x16\x40\x29\xc3\x59\xd1\xcf\xbf\xbc\x1f\xd7\x16\x40\x2c\x38\x5a\x00\x46\x8b\x6e\xc9\x4b\x67\x33\x2e\x32\x91\x2b\xb8\xea\x0d\xdf\x75\x6d\x67\x65\x28\xd6\x27\x9b\xff\xbc\x42\xe6\x9e\x1c\x33\x7e\xe2\xac\x88\x68\x6d\x57\x5b\x6e\xfa\xa7\xa3\x7e\x6f\xd8\x1b\xf5\x83\xeb\x41\xd7\x6e\x7b\x32\x09\x73\xf4\x4e\xcc\x0e\xfd\xff\x94\x8b\x39\x9a\x85\x54\x44\x61\xba\x87\xe4\xc4\x59\x35\x18\x3d\xf0\x3f\xeb\x8f\xce\x82\x37\xd7\xbd\xeb\xbf\x46\x5b\xda\x19\x86\x6c\x7c\xe2\xac\xb6\x88\x1e\xd5\x6e\xb3\xd7\xae\xcb\xb6\x77\x84\xef\x68\xef\xfd\xb3\xfa\x95\xb8\xd3\x81\x3f\x1c\x06\x17\xa7\x83\xd1\xe0\xf7\x77\xfe\xb9\x66\xb7\xad\x71\xc9\x35\x65\x63\xf7\xb8\x7d\xe4\xc9\x28\xc1\x79\x28\x4f\x9c\xd5\xbe\xcd\x6b\xdb\xb2\xfa\xfe\xe0\xfd\xf0\xf2\x6a\xf4\x36\x38\xf3\xbb\xd5\x11\xf2\x56\xab\x76\xdf\x1c\xc6\xb7\x2c\xc5\x8b\x70\x8e\xeb\xb5\x6d\xbd\x09\x2e\x1a\x24\xfe\x02\xa3\x42\x85\xe3\x07\x8a\xe6\x61\x0c\xce\x7b\xa7\xfe\xc8\xbf\x09\x86\xa3\xde\xdb\xa1\x7f\x3d\x0a\x2e\x06\xc3\xde\xd9\x59\xe3\x84\xaa\x3c\xcc\x20\x54\xb8\x60\x0a\x88\x54\x67\x0c\x93\x7e\x91\x86\xbd\x28\xc2\x4c\x61\xdc\xed\x58\x96\xa1\x38\x38\xb4\x56\x16\x80\x96\xe2\x34\x89\xa0\xdb\x85\x4e\x9d\x71\x45\xd6\xac\x83\xe0\xe2\xdf\x70\xd4\xa4\x03\xc0\x05\x46\x60\x3b\x6f\x82\x0b\x5b\xaf\x60\x2a\x71\xf7\x15\x9d\x1c\xaa\xb0\x1f\x7f\xfb\xb4\x36\x74\x13\x66\xe9\x3f\x6b\xcb\xc2\x3c\x17\x79\x5d\x3f\x77\x01\x3a\x24\xd4\x0b\x3e\x23\x67\x6a\xd9\x94\xba\x93\x7b\x36\x94\x64\xae\xab\x99\x81\xeb\x2a\x5c\x28\x92\xda\x59\xdb\x70\xfc\x5f\x5e\x8c\x77\x1e\x2f\xd2\x94\x5a\x46\xba\x23\x64\x16\xb3\x30\x15\xd3\xaf\x4a\xa9\xe8\x5c\x77\x2e\xa7\x63\xb1\xf8\x66\x01\x37\xdf\x28\xe0\xe6\x1b\x05\x94\x3e\xc6\x28\x11\x25\x89\x55\xba\x54\x67\x43\x87\xdc\xba\x44\xc9\x45\xe9\xd6\x61\x30\x3c\xf3\xbb\x4e\x87\xfe\xf5\x6f\x86\x5d\xe7\xf8\x29\x7c\x5d\xb5\x51\x72\x37\x53\x29\x76\x6d\x47\x0b\xb2\x4b\xff\xd3\xb3\x7f\x33\x6c\xa8\x0f\x5f\xbe\x18\x1d\x8f\x9e\x2a\x14\x5a\x34\xd4\x44\x6b\xc3\xa1\x92\xfd\x15\x79\xdf\x1f\x99\x1d\x79\x51\x8a\x61\xbe\x23\xb7\x73\x04\xaf\x8e\xb6\xa4\x37\xc2\x66\xdc\xf8\xa2\xb2\xe4\xc5\x46\xc4\x9c\x49\xc9\xf8\xb4\x0d\x83\x19\xcb\x32\xc2\x09\x65\xdb\x69\x97\x47\xac\x62\x68\x8e\x4f\x94\x60\x34\x1b\x65\x39\xde\x21\xaf\x8e\xb9\xae\x49\x3a\xdc\xc6\x60\xd2\x97\xd6\xec\xa6\x9d\x5b\x9c\x5a\x66\x81\xcd\xe7\x18\xb3\x50\x51\xab\x14\x13\x10\x1c\xe9\x47\x25\x28\xd1\x60\x18\x6a\xbe\x59\x8e\x12\xb9\xb2\x5a\x70\x80\xed\x69\xfb\x05\x8c\x31\x0a\x0b\x69\x3a\x79\x05\x47\x90\xdf\xb1\x5c\xf0\x39\x72\x05\xf7\x21\x57\x1a\xe4\x24\x21\x8f\x53\xdc\x0b\x59\x98\x92\x98\x4e\x0e\x9b\x26\x81\xed\xbc\xbb\x3c\xf7\xbd\x76\xbd\xca\x37\x60\x97\xc7\xc5\xa8\x64\x57\xe3\x66\x6f\xb3\xa9\x95\xf9\xff\xd3\x76\x54\xd1\xb7\x6d\xdc\xe7\x48\x36\x81\x0a\x7b\xc5\x25\x78\xe1\x8c\x4f\xad\x8c\xc5\xa2\xfe\xaa\x7e\x54\x9e\x3f\xaf\x22\xf4\x08\x47\xa7\xec\x41\xc1\xc5\xd0\x3f\xbd\xee\x0d\x83\xcb\x0b\xe2\x4d\xf0\x14\xe7\x99\x5a\x6e\x81\xe7\x6d\xda\x26\x92\x36\x92\xa8\x87\x18\xc3\x63\xcc\xca\x6c\xea\xfb\x57\xf5\x64\xfa\x0c\xce\xc1\x7d\xc2\xa2\x84\xe4\x5f\x1d\x6e\xa5\x94\x29\x49\x7d\xff\x8a\x34\xf9\xce\x54\xae\xd4\x9d\x3c\xa8\x3b\xda\x49\x5b\x23\xa1\x5f\x03\xd5\x0d\x49\x57\x06\xa5\x13\x38\x2c\x65\xc1\x24\x17\x73\xb8\x67\x2a\x61\xbc\x8e\x14\xb5\x0e\x35\xb3\x77\x3b\x70\x43\x6e\xb5\xf8\xd0\xc8\x0d\xda\xb5\x35\x3c\x25\x9f\x97\x31\x7d\x4c\xde\x6b\x48\x90\x47\x08\x85\xd4\xd8\xdf\x00\xd4\xeb\x82\xeb\x21\x81\x10\x41\x57\xab\xd1\x82\x18\x15\xe6\x73\xc6\x11\xee\x13\xcc\x9b\x47\x4a\xdb\x2b\x13\x51\xa4\x31\x8d\x0b\x8c\x4b\x15\xa6\x29\xc6\x5a\xfb\x8f\xe0\xf8\x1f\x82\x3e\xb8\x1c\xa9\x53\x7f\x7a\x88\x4b\xdf\x1f\x0c\x83\x0b\x1d\x75\xc2\x2f\xa3\xd2\xbb\xdd\x7d\x67\x2b\xcc\xb2\x94\x45\x3a\x97\xa5\x0e\xd3\xe0\xaf\xc1\xd0\x3f\x1f\xfd\x19\xf4\xfd\xae\x6d\x5b\x55\x1d\x7b\x94\xe7\x0e\x26\xdb\xe1\xd8\xd2\x36\x2f\xe2\xa9\x3b\x27\x5c\x1e\xf2\x58\x3f\xb0\x48\x70\x37\x47\x29\x8a\x3c\xc2\x1d\xc9\xae\x3b\x17\x31\x82\x5c\x4a\x85\x73\x83\x8f\xe3\x07\xa8\x75\x65\xa0\xfb\x23\x4a\x35\x0f\xae\xbb\x1f\xa5\x59\x2d\xd0\xa9\x4f\x79\xbe\xe3\x73\xf6\x30\x33\x28\x1d\x15\x52\x9a\x4d\x40\x8a\x17\x14\x26\x5a\xa3\xd9\x2f\x13\xac\xac\x73\xc4\x41\xd2\x10\x51\xc5\xdf\x7a\xa8\xc5\x5b\x7a\x37\xf2\xac\x84\x7a\x7e\x7f\xd4\xbb\xba\x1a\xfd\xe1\x5f\x0f\x82\xcb\x8b\xae\x73\x30\xcd\x31\x03\xfb\x7f\x6e\xdc\x8a\x9f\xfb\xa6\x60\x69\x1c\xc4\x5d\x1b\xfe\x5f\x76\xc3\x17\x48\x30\x8c\xc1\xe5\xd0\x81\x2f\x10\x15\x0a\xdc\x18\x6c\xb0\xe9\x20\x76\x0e\x4d\xea\x7f\x8f\x22\xb5\x73\xfb\x55\xd6\x2d\x73\x9c\x37\x79\x7c\x02\xce\x5e\x07\x80\xae\x8f\x27\x7a\x56\xab\xd6\xec\xaa\x24\xd9\xfb\xf7\xd8\x84\x6c\xed\xc6\x8e\xc7\xfb\x1f\xa5\xd3\x6a\xc5\x26\xd0\x26\x6c\x4c\xee\x59\xaf\xf7\x81\xf2\x41\x70\xe6\x5f\x0c\xf7\x02\xf2\x16\x1d\xcc\x7b\xf0\x3f\x9c\xf5\x40\x70\x53\xa2\x1b\x39\x14\x0b\x94\xfc\x07\x45\x72\xa5\xaa\x94\x7f\xf6\xf5\x94\xf8\x46\xac\x46\x1a\x08\x0e\x51\xc8\x23\x4c\x41\xb2\x79\x96\x2e\xb5\x8d\x52\x27\xab\x28\x72\x33\x33\x98\x0e\x9c\x43\x1a\x16\x3c\x4a\x50\x52\xfb\x79\xa1\x13\x79\x7b\x32\xa0\x79\x1b\x15\x98\x2a\x24\xe0\x48\xf3\x31\xf3\xb5\x80\x0e\x69\xa5\x8d\x0d\x4b\xfa\x52\x8b\xad\x19\xe4\xa8\x5c\xfe\x27\x28\x49\x70\xd1\x65\x7c\x22\x1e\xb0\xe4\x6a\xd5\xbe\xca\x45\x5c\x44\xaa\xca\x53\xd7\x25\x2f\xd2\x60\xde\x1c\xa6\x36\xf1\x22\x12\x31\x73\xd3\x70\x8c\x69\xb7\x37\xcd\x11\x09\x9e\x69\x77\x94\x8b\x7d\x26\x43\xbd\x6e\x42\x1d\xc8\x77\x6a\x9e\x12\x83\xf5\xda\x75\x13\x35\x4f\x57\x2b\xe4\xf1\x7a\x5d\x8d\x30\x3a\x39\xf3\x13\x70\x7e\xad\xc6\x9b\x6f\x43\xac\x14\x8a\x28\xe4\xd4\x15\x26\x8c\xc7\x10\xf2\x25\x88\x4c\x83\x1c\x25\xa8\xf8\x45\x08\x5a\x41\x6f\xa3\xd1\xb8\x50\x4a\x70\xa9\x2b\x63\xc9\xb3\x0d\x3d\x8a\xdb\x64\xc2\x22\x16\xa6\x80\x8b\x70\x9e\xa5\x48\xbf\x91\x4a\x97\xba\xc5\xc0\xe5\xfb\x72\xa7\xbe\xee\x92\x27\x9e\xa7\x30\x4a\xc6\xa1\xc4\xf6\x2c\xc6\xb6\xc8\xa7\x5e\x1f\xef\x30\x15\x19\xc1\x30\x6f\x58\x28\x91\xb3\x30\x95\xde\x20\xc1\x34\x1d\x0d\xf4\x75\x0a\xe3\xd3\x11\x71\x1b\xbd\xef\xfb\xa3\xbe\x96\x2d\x5b\xbe\x11\x37\x3a\xee\xb4\x47\x26\x42\x63\xb1\x18\x19\xcd\x46\x63\xb1\xd8\x18\xaa\xdb\xdc\x12\x22\xea\xbb\xf7\x08\x59\x28\x25\x68\x77\x4b\xa0\x5d\x8f\x87\xbf\x06\xe2\x0d\x77\x78\x3c\xae\x4b\x94\x26\x86\xb0\x2f\xb0\x60\x57\x7e\xdc\x8c\x97\xfa\x57\xeb\xe4\xfc\x0a\xac\x0a\xcb\xd1\x61\xf9\xcf\x9e\x44\xed\xd4\x5e\x99\xc8\x9f\xb1\x08\xb9\xc4\x4d\x82\xdb\x25\xc5\xeb\xd7\x1b\xd2\xce\xe1\xa3\xbb\x28\xfa\xdb\x3b\x1b\x65\x67\x8b\x95\xbb\x87\x57\x8f\x43\xc1\x71\x91\x61\x44\xe7\xd1\x4c\xb7\x49\x28\x41\x44\x51\x91\xe7\x18\xb7\xed\xaf\xdb\x53\x8a\x40\x19\x46\x9b\x5a\x57\xe5\xb9\xa9\x79\xf8\x37\xb4\x07\xba\xaf\x06\x35\x38\x6e\x87\x72\x66\x7f\x77\x15\xa4\x8c\xb8\x47\x08\xe5\x4c\xb7\xc0\x42\x62\xbe\xa9\x86\xf7\x08\x49\x78\x87\x30\x11\x05\x8f\x81\x0b\xc8\x31\x94\xe6\x4c\xc8\x19\xcb\xa0\xe0\x8a\xa5\xba\xdc\x68\x46\xe5\x44\x15\x98\xe6\x60\x83\xfd\xa7\xc6\x3d\x4b\x51\xe8\xab\x3c\xda\x56\x01\x6f\x04\xe7\x80\x92\x5e\x5f\xdb\x6d\xf4\x3c\x34\x67\x64\x49\xa5\xcf\xe0\x86\x5f\x6f\xf9\x2d\xd7\x57\x93\xe6\x96\x36\x8e\xa9\x6b\x2b\x61\x68\xea\x40\x05\xe6\xc8\x0b\xd3\xe5\x8d\x7c\x20\x78\x22\xdb\xb7\x3c\x98\x68\x15\x62\x41\xb5\x3c\x16\xe6\x5e\x92\x56\xa2\x90\x83\x54\xc4\xd7\x94\x56\xed\x80\x1a\x4f\x18\x2f\x21\x16\xc5\x38\x45\x37\x4a\x59\x34\x23\x1c\x28\x9a\x77\x95\x6d\xbb\x11\x9d\x0a\x91\x54\x08\x23\xc6\x0c\x79\x8c\x3c\x62\x54\xb6\x73\xac\xe6\x30\x3a\x83\x64\x7e\x69\x25\x1c\xdc\x6f\x2e\xaa\xc7\x85\x9e\xb7\xf4\xfc\x76\xf8\x70\x2b\x1e\x4d\x99\x6a\x4f\x72\xc4\xb2\xf1\xe8\x4a\xb1\x88\xa7\x5e\xf9\xac\x6b\xad\x5b\x28\x96\x4a\xef\x61\x22\x80\xc6\xdb\xd2\x31\xb5\xd7\xbb\x28\xae\xf9\x8e\xe0\xde\xd6\x52\xc5\x91\xdc\xbd\x41\x74\x0d\xfe\xe0\xba\x39\x8e\x09\x63\xe8\xfd\xba\x4f\xb8\x51\x18\x25\x08\xb7\x16\x80\xeb\xde\x21\x8f\x45\xde\x6d\xde\xc5\xbb\xae\x44\xe5\xce\x70\xd9\x25\x6c\x5d\x3e\xde\x85\x69\x81\x5d\xfb\xd6\x5c\xfe\xe9\x1c\x59\xdf\xda\xf0\xaf\x0f\x76\xc9\xaa\xda\x53\x43\x37\xbf\x8b\xb9\x9e\x60\x1b\x1c\x4e\x91\x23\xa5\x9d\xbe\xa6\xaf\xae\x85\x6b\x3c\xc8\x09\xba\x87\x5d\x97\x8e\x78\x68\x62\x95\x88\x61\xbe\xdc\xd1\xec\x41\x2d\xcf\x03\xef\xf6\x56\xae\x77\x20\x95\x91\x11\xb3\xfc\x71\xd4\x57\x11\x11\x5e\xee\xfe\xfc\xf2\x25\xe5\x51\xc1\x2b\x6f\xd2\x44\xcb\x44\x21\x4d\x3e\x5b\x3b\x21\xab\x91\xba\x2e\x17\x45\x16\xd3\xf1\x72\x5d\xc9\x3e\x23\x74\xfe\x03\x7b\xac\xfa\x4e\x26\xc7\xff\x7e\x02\x26\x3f\x1d\x3f\x01\x93\x7f\xbf\x7a\x02\x26\xff\x79\x0a\x73\x7e\x7e\x0a\x73\x7e\x79\x8a\xe8\x74\x8e\x9f\xc2\x29\xc7\x2f\x9f\x42\x97\x97\x9d\xa7\x70\x4b\xe7\xe8\x91\x8c\xb3\x5a\x9b\xe2\x4e\x45\x98\x38\x96\x9f\xe9\x56\xab\xdc\x7c\xdf\x63\x3c\xc6\x05\x21\x63\x7a\x77\xd2\x85\x76\x40\xa7\x66\xbd\xde\xa3\xc2\x5e\x05\x22\xc1\xf5\x5d\x74\x98\x65\xb2\xd2\x67\xb5\xd2\xec\xda\x03\xf6\x19\xd7\xeb\x3a\xe8\x31\xeb\x15\xea\xb1\x57\x2b\x67\x47\xe7\x66\xe7\x6e\x9f\xb3\x39\x0e\x97\x19\x96\x13\xcb\x66\xa6\xae\x94\x71\x6a\x33\xb4\xd6\xcc\x14\xcb\x06\xd2\x6a\xf2\xa8\x89\xd8\xb5\x51\x43\x57\x63\x1c\x79\x2f\xd8\xeb\x3d\x8d\x61\x69\x49\x6b\xa2\x96\x19\x5a\xc1\xef\x97\x17\x83\xae\x73\xa0\xd1\xf0\xde\x4f\x2f\xba\x1a\x79\x36\xb8\xf7\x89\x30\x28\x1f\xec\x1f\x3d\xe2\x40\x0c\xa4\xf7\x63\x3b\xe3\xd3\x9d\xbb\x64\x95\x17\x78\x68\x91\x3c\x92\x40\x6d\xd0\xd1\xa2\xa0\xfc\xde\x46\x0f\xa3\x41\xf0\xdf\x7e\xd7\x39\xa8\xae\xcb\x69\x4d\x8f\xbd\x39\xde\xd5\xa6\x52\x4f\x4f\xa5\x3f\xed\xac\x2f\x1e\xa6\xd5\x7f\x8a\x79\x15\xe8\x8d\xc6\x55\xb4\x8d\x40\xad\xc4\xba\x26\xbe\x8e\x57\xb4\xee\x5f\x40\x62\x4c\xc3\xe0\x0f\xd2\x23\x5b\x3d\x6f\xfa\xc3\xa1\xa5\x3f\x0e\x5a\xdb\x8d\xb2\x11\x07\x73\x9b\x72\x1e\x9c\xfb\xd6\x54\xcd\x5c\xb3\x6a\xf4\xd4\x5d\xd2\xfa\xdf\x00\x00\x00\xff\xff\x1a\x1f\x76\x47\x58\x1f\x00\x00")

func appimageTemplatesApprunShBytes() ([]byte, error) {
	return bindataRead(
		_appimageTemplatesApprunSh,
		"appimage/templates/AppRun.sh",
	)
}

func appimageTemplatesApprunSh() (*asset, error) {
	bytes, err := appimageTemplatesApprunShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "appimage/templates/AppRun.sh", size: 8024, mode: os.FileMode(493), modTime: time.Unix(1560262270, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"appimage/templates/AppRun.sh": appimageTemplatesApprunSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"appimage": &bintree{nil, map[string]*bintree{
		"templates": &bintree{nil, map[string]*bintree{
			"AppRun.sh": &bintree{appimageTemplatesApprunSh, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
